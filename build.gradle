/**
 * ORACP - Database Copy utility
 *
 *  Copyright 2016 by Chad Juliano
 *
 *  Licensed under GNU Lesser General Public License v3.0 only.
 *  Some rights reserved. See LICENSE.
 *
 * @license LGPL-3.0 <http://spdx.org/licenses/LGPL-3.0>
 */


plugins {
	id 'java'
	id 'edu.sc.seis.launch4j' version '2.1.0'
	id 'net.nemerosa.versioning' version '1.7.1'
}


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
version = '1.0.0'

import java.text.SimpleDateFormat


ext {
	Date buildTimeAndDate = new Date()
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
    buildJVM = (System.properties['java.version']
    	+ " (" + System.properties['java.vendor']
    	+ " " + System.properties['java.vm.version'] + ")")
    buildUser = System.properties['user.name']
    releaseDir = file('release')
}


repositories {
    jcenter()
    maven {
		// We use the https://maven.oracle.com repository to download ojdbc.jar. Unfortunately
		// the type of authentication it uses is not supported by Gradle. As an alternative
		// we can use the one below.
       	// NOTE: You may see warnings during the download but that does not mean it failed.
        url 'https://www.oracle.com/content/secure/maven/content'

        // You will need to enter an OTN login here.
        credentials {
            username 'user'
            password 'password'
        }
    }
}


dependencies {
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.3.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'

    // If you give up getting ojdbc7.jar to download from maven.oracle.com you can manually
    // download the file copy it to ./launch/lib and switch the dependency line below.

  	//compile files('lib/ojdbc7.jar')
    compile group: 'com.oracle.jdbc', name: 'ojdbc7', version: '12.1.0.2'
}


test {
    filter {
        //don't include tests requiring a DB connection.
        includeTestsMatching "*.T01_testHelp"
    }
    testLogging {
    	showStandardStreams true
    }
}


jar {
    manifest {
        attributes (
            'Built-By': project.buildUser,
            'Created-By': project.buildJVM,
            'Build-Date': project.buildDate,
            'Build-Time': project.buildTime,
            'Build-Revision': versioning.info.commit,
            'Specification-Title': 'ORACP - Database Copy utility',
            'Specification-Version': project.version,
            'Implementation-Title': 'org.oracp',
            'Implementation-Version': project.version,
            'Main-Class': 'org.oracp.OcpMain' )
    }
    metaInf {
        from '.'
        include 'LICENSE*'
    }
}


task createLaunch4j(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
	group = 'release'
	outfile = 'oracp.exe'
	description = "Create the ${outfile} launcher."
    mainClassName = 'org.oracp.OcpMain'
	fileDescription = 'ORACP Copy utility'
    icon = "${project.projectDir}/images/oracp.ico"
    headerType = 'console'
	copyright = '2016'
    dontWrapJar = true
   	textVersion = project.version
}


task copyRelease(type: Copy) {
	group = 'release'
	description = 'Copy executable and dependenciess to release directory without ojdbc7.'
	destinationDir = project.releaseDir

	eachFile { file -> println "COPY: ${relativePath(new File(destinationDir, file.path))}" }

	from(createLaunch4j.outputs) {
		include '*.exe'
	}

	into('lib') {
		from jar.outputs.files
		from configurations.runtime.files { dep -> dep.name != 'ojdbc7' }
	}
}


task copyOjdbc(type: Copy, dependsOn: copyRelease) {
	group = 'release'
	description = 'Copy required ojdbc7 dependencies.'
	destinationDir = project.releaseDir

	eachFile { file -> println "COPY: ${relativePath(new File(destinationDir, file.path))}" }

	into('lib') {
		from configurations.runtime.files { dep -> dep.name == 'ojdbc7' }
	}
}


task cleanRelease(type: Delete) {
	group = 'release'
	description = 'Delete build products from release directory.'

	delete copyRelease.outputs.files.asFileTree.matching {
		include '**/*.jar'
		include '*.exe'
	}

	targetFiles.each { file -> println "DELETE: ${relativePath(file)}"}
}
